#include "dkli.dkh"
#!

module "Controller"
{
	#include "functions.dkh"
	#include "serialize.dkh"
	#include "dbr.dkh"
	#include "webauth.dkl"
	#include "config.dk"
	#include "entity.dk"
	#include "view.dk"


	#!
	
	get_payload::
	{
		ref post=@@(@http_context,"&request/post")

		if not(isnull(post))
		{
			if list.create_from_fields(post)>0
			{
				return post
			}
		}

		return from.json(field.dstr(@http_context,"request/post_string","null"))

		exception{}

		return @null
	}

	dbr.check_alter_access::&user
	{
		ref manifiesto=from.json(@crudl.access_privilege)

		ref privs=auth.checkPrivs(user, manifiesto)

		return @count(privs)>0
	}

	dbr.alter_id::qname, uid,uname, ids
	{
		// conectar con open
		ref db = dbr.open(qname)
		// verificar si en tuser existe uid y si no existe insertarlo, con userid=uid, username=uname, pwd=uuid() (recuperas su sys_pk porque te va a servir para insertar la sesion (sys_session.iuser))
		new params
		{
			@"userid":uid
			@"username":uname
			@"pwd":uuid()
			@"sys_guid":uuid()
		}
		sys_pk_user = dbr.num(db, "Select sys_pk from tuser where userid=@userid", params)
		
		if not(sys_pk_user)
		{
			do dbr.execute(db, "insert into tuser(sys_timestamp,sys_guid,username,pwd,pwdmd5,userid) values(now(), @sys_guid,@username,@pwd,@pwd, @userid)", params)
			sys_pk_user = dbr.num(db, "Select sys_pk from tuser where userid=@userid;", params)
			
		}
		// verificar si en sys_session existe el ids, si no insertar una fila en sys_session (una sesión cerrada es sys_deleted=1)
		new p
		{
			@"sys_pk_user":sys_pk_user
			@"sys_guid":ids
		}

		ids_u = dbr.str(db, "select ss.sys_guid from sys_session ss where ss.sys_guid=@sys_guid and not ifnull(ss.sys_deleted,0);", p)

		if ids_u == ""
		{
			do dbr.execute(db, "insert into sys_session(sys_timestamp,sys_dtcreated,sys_guid,sys_deleted,iuser, sys_recver,clientinfo) values(now(),now(), @sys_guid,0,@sys_pk_user,0,'Unknow')", p)
		}

		do dbr.close(db)

		return dbr.reconnect(qname, ids)
	}

	ref params = @@(@http_context,"&request/get")
	

	ref input_data = get_payload()
	ref output_data=@null
	ref db=@null

	http_method=toupper(@@(@http_context,"request/headers/request_method"))
// do rise_error(00,@crudl.qname)
	@expected_html=contains(tolower(replace(@@(@http_context,"request/headers/HTTP_ACCEPT")," ","")),"text/html")
	@entity_path=path.concat(@crud_path, @@(@http_context,"request/get/_entities_type"))
	
	qname=""

	if @@(@http_context,"request/get/_connection")!="" && @@(@http_context,"request/get/_app_group")!="" 
	{
		qname=@@(@http_context,"request/get/_connection")+"@"+@@(@http_context,"request/get/_app_group")
	}

	model_entity = path.concat(@entity_path,"model.dk")
	controller_entity = path.concat(@entity_path,"controller.dk")
	
	if file.exists(model_entity) { include model_entity }
	else { if not(@auto_crud) { do rise_error(404,"Entidad no definida") }}

	if file.exists(controller_entity) { include controller_entity }

	if @expected_html
	{
		//Buscar archivos de vistas
		@form_view=parse_view_file(@form_view)
		if @form_view=="" { do rise_error(500,"Vista de formulario no disponible")}

		@list_view=parse_view_file(@list_view)
		if @list_view=="" { do rise_error(500,"Vista de lista no disponible")}

		@error_view=parse_view_file(@error_view)
		if @error_view=="" { do rise_error(500,"Vista de error no disponible")}

		//Si el método es POST, pero se requiere HTML y no es una entidad nueva, entonces asumir que es PATCH
		if @@(params,"_entity_id")!=@entity_id_blank && @@(params,"_entity_id")!="" && http_method=="POST" { http_method="PATCH" }
	}
	ref db=@@(@http_context,"&session/idp/database") 
	if isnull(db)
	{
		if qname=="" { qname=@crudl.qname }

		if @@(@http_context,"$session/user/ids")!="" && @crudl.enable_idreplacement
		{
			if not(dbr.check_alter_access(@@(@http_context,"&session/user"))) { do rise_error(0,"Usuario no autorizado.")}

			ref db=dbr.alter_id(qname,@@(@http_context,"$session/user/uid"),@@(@http_context,"$session/user/name"),@@(@http_context,"$session/user/ids"))
		}
		else
		{

			ref db=dbr.login(qname, @crudl.user,@crudl.pwd)
			exception{
				// ref db=dbr.open(qname)
				// current_url=view_login_current_url(@true)
				dest_url=view_login_current_url(@false)
				dcode_url=url_encode(dest_url+"?token=@token")
				if @ws==""
				{
					@http_context<"response/headers/Location">:@url_home
				}else{
					@http_context<"response/headers/Location">:@url_home+"?url="+dcode_url
				}
				return 
			}
		}
	}
	
	ref @database=db
	operation=""

	switch http_method
	{
		case "GET"
		{
			if @@(params,"_entity_id") != "" { operation="read" }
			else { operation="list" }
		}
		case "POST" { operation="create" }
		case "PUT"  { operation="update" }
		case "PATCH"{ operation="update" }
		case "DELETE" { operation="delete" }
	}
	
	that @view_controller(operation, params)
	
	switch operation
	{
		case "read"
		{
			if @@(params,"_entity_id")==@entity_id_blank
			{
				if isnull(@blank) { do rise_error(404,"Operación no admitida (nuevo)") }
				that @blank(db,params) ->* output_data
			}
			else
			{
				if isnull(@read) { do rise_error(404,"Operación no admitida") }
				that @read(db,params)->*output_data
			}
		}
		case "list"
		{
			if isnull(@list) { do rise_error(404,"Operación no admitida") }
			that @list(db,params)->*output_data
		}
		case "create"
		{
			if isnull(@create) { do rise_error(404,"Operación no admitida") }
			that @create(db,params,input_data)->*output_data
		}
		case "update"
		{
			if isnull(@update) { do rise_error(404,"Operación no admitida") }
			that @update(db,params,input_data)->*output_data
		}
		case "delete"
		{
			if isnull(@delete) { do rise_error(404,"Operación no admitida") }
			do set_http_status(204)
			that @delete(db,params)
		}
	}

	that @success_view(params, input_data, output_data, @null)

	
	exception
	{
		if last_error_code()>=400 { do set_http_status(last_error_code()) }
		else { do set_http_status(500) }

		new error_info
		{
			@"message":last_error()
		}

		that @fail_view(params, input_data, output_data, error_info)
	}
	
}