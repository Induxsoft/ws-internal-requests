#include "dkli.dkh"
#!
program
{
    #include "functions.dkh"
    #include "serialize.dkh"
    #include "dbr.dkh"
    #include "dbm.dkl"

    // PREPARACIÓN DE VARIABLES
    ref args = commandline("=")
    src = _get(@_run_settings,"$SourceCodeFile")

    path_install = dir.name(src)
    path_ddm = path.concat(path_install, "ddm")
    path_initial_data = path.concat(path_install, "initial_data")
    model_name = file.name(dir.name(path_install)) + ".ddm"
    model_file = path.concat(path_ddm, model_name)

    qname = trim(@@(args,"$db"))
    if qname == "" { qname = trim(@@(args,"$bd")) }
    if qname == "" { do rise_error(99,"Debe de indicar un nombre cualificado de conexión `db`.") }

    // Archivos de datos iniciales (Orden de instalación)
    ref files_to_import = from.json('[
        "gs_status_solicitud.csv",
        "gs_tipo_solicitud.csv",
        "sys_app_catalog.csv",
        "sys_app_category.csv",
        "sys_app_shortcut.csv",
    ]')
	// Lista de permisos iniciales
    ref permissions_to_import = from.json('[]')

    // DECLARACIÓN DE FUNCIONES
    ref lib_csv = _import_library("devkron.serialize.csv.dll")
    do _map_function(lib_csv,"devkron.serialize.csv.csvHelper","CsvRead","CsvRead","System.String,System.String","*")
    do _map_function(lib_csv,"devkron.serialize.csv.csvHelper","CsvWrite","CsvWrite","System.String,*System.Object","void")

    reconnect::&db,qn
    {
        if isnull(db) || not(dbr.is_open(db)) { ref db = dbr.open(qn) }
        do dbr.rec(db,"select 1 as success;",@null)
        exception
        {
            do clear_exceptions()
            ref db:dbr.open(qn)
        }
    }

    /**
    * Importar datos iniciales del paquete desde archivos csv.
    * El nombre del archivo debe coincidir con el nombre de la tabla destino.
    */
    installData::&db,fsrc
    {
        table_name = file.justname(fsrc)
        ref list_records = CsvRead(fsrc,"")

        for m = 0; m < list.count(list_records)
        {
            ref record = list.obj(list_records,m)
            ref fields = list.create_from_fields(record)

            for n = 0; n < list.count(fields)
            {
                field = list.str(fields,n)
                if @@(record,field) == "\\N" || @@(record,field) == "\\0" { record<field+"*"> : @null }
            }

            do dbr.insert(db,table_name,record)

            exception{ if not(contains(last_error(), "Duplicate entry")){ do print(last_error()) } }
        }
    }

    //* ======================================== [ EJECUCIÓN DEL PROGRAMA ]

    if not(file.exists(model_file)) { do rise_error(99,"No se encontró el modelo: _install/ddm/" + model_name) }

    fext = file.extension(model_file)
    ref data_model = @null

    if fext == ".json" { ref data_model = from.json(file.rtext(model_file)) }
    else if fext == ".ddm" { ref data_model = getTableSchema(model_file) }
    else { do rise_error(1,"El tipo de archivo del modelo no esta soportado.") }

    ref database = dbr.open(qname)
    if not(dbr.is_open(database)) { do rise_error(99,"No fue posible abrir la conexión. Verifique el nombre cualificado de conexión.") }

    // Instalar modelo del paquete.
    if not(dbm.existLogTables(database))
    {
        do dbm.inferModel(qname)
        do print("-- ------------------------- --")
    }

    do print("\nINSTALANDO MODELO")
    if not(dbm.installModel(database,model_name,data_model)) { do rise_error(99,"No se instaló el modelo") }
    
    // Importar datos iniciales
    if dir.exists(path_initial_data) && list.count(files_to_import) > 0
    {
        do reconnect(database,qname)
        do print("\nIMPORTANDO DATOS INICIALES")

        for i = 0; i < list.count(files_to_import)
        {
            file = path.concat(path_initial_data,trim(list.str(files_to_import,i)))
            if file.exists(file)
            {
                do print(file.justname(file))
                do installData(database,file)
            }
        }
    }
    
    // Asignar permisos al grupo de administradores.
    if list.count(permissions_to_import) > 0
    {
        do reconnect(database,qname)
        do print("\nNUEVOS PERMISOS AL GRUPO DE ADMINISTRADORES")

        gpoAdmins = dbr.rec(database,"select sys_pk from usergroup where groupid='Administradores' or groupid='Administrators' or groupid='Admins';",@null)
        if gpoAdmins <= 0 { do rise_error(99,"No pudo encontrarse el grupo de Administradores.") }

        for i = 0; i < list.count(permissions_to_import)
        {
            itemId = trim(list.str(permissions_to_import,i))
            using profile_item
            {
                @"sys_pk": 0
                @"sys_guid": uuid()
                @"sys_timestamp*": now()
                @"sys_dtcreated*": now()
                @"sys_recver": 0
                @"usergroup": gpoAdmins
                @"item": dbr.num(database,"select sys_pk from sitem where itemid='"+itemId+"'",@null)
            }
            do dbr.insert(database,"profile",profile_item)
            do print(itemId)
            
            exception{ if not(contains(last_error(), "Duplicate entry")){ do print(last_error()) } }
        }
    }

    if dbr.is_open(database){ do dbr.close(database) }

    exception
    {
        if isset("database") {
            if dbr.is_open(database){ do dbr.close(database) }
        }
        do print(last_error())
    }
}